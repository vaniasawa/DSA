/*
https://leetcode.com/problems/find-players-with-zero-or-one-losses/

You are given an integer array matches where matches[i] = [winneri, loseri] indicates that the player winneri defeated player loseri in a match.

Return a list answer of size 2 where:

answer[0] is a list of all players that have not lost any matches.
answer[1] is a list of all players that have lost exactly one match.
The values in the two lists should be returned in increasing order.

Note:

You should only consider the players that have played at least one match.
The testcases will be generated such that no two matches will have the same outcome.

Example 1:

Input: matches = [[1,3],[2,3],[3,6],[5,6],[5,7],[4,5],[4,8],[4,9],[10,4],[10,9]]
Output: [[1,2,10],[4,5,7,8]]
Explanation:
Players 1, 2, and 10 have not lost any matches.
Players 4, 5, 7, and 8 each have lost one match.
Players 3, 6, and 9 each have lost two matches.
Thus, answer[0] = [1,2,10] and answer[1] = [4,5,7,8].

Example 2:

Input: matches = [[2,3],[1,3],[5,4],[6,4]]
Output: [[1,2,5,6],[]]
Explanation:
Players 1, 2, 5, and 6 have not lost any matches.
Players 3 and 4 each have lost two matches.
Thus, answer[0] = [1,2,5,6] and answer[1] = [].

Constraints:

1 <= matches.length <= 105
matches[i].length == 2
1 <= winneri, loseri <= 105
winneri != loseri
All matches[i] are unique.

*/

class Solution(object):
    def findWinners(self, matches):
        """
        :type matches: List[List[int]]
        :rtype: List[List[int]]
        """
        loss_hash_map = {}
        del_keys = set()
        for match in matches:
            if (match[0] not in loss_hash_map.keys()) and (match[0] not in del_keys):
                loss_hash_map[match[0]] = 0
            if (match[1] not in loss_hash_map.keys()) and (match[1] not in del_keys):
                loss_hash_map[match[1]] = 0
            if match[1] in del_keys:
                continue
            loss_hash_map[match[1]] += 1

            if loss_hash_map[match[1]] > 1:
                del loss_hash_map[match[1]]
                del_keys.add(match[1])

        no_matches_lost = sorted([el for el in loss_hash_map.keys() if loss_hash_map[el] == 0])
        one_match_lost = sorted([el for el in loss_hash_map.keys() if loss_hash_map[el] == 1])
        return [no_matches_lost, one_match_lost]