from min_heap import *
from max_heap import *

# Tip: You may use some of the code templates provided
# in the support files

class MedianOfStream:
    min_heap_of_large_nums = []
    max_heap_of_small_nums = []

    def insert_num(self, num):
        if self.max_heap_of_small_nums == []:
            heappush(self.max_heap_of_small_nums, -num)
        elif num <= -self.max_heap_of_small_nums[0]:
            heappush(self.max_heap_of_small_nums, -num)
        else:
            heappush(self.min_heap_of_large_nums, num)

        if len(self.max_heap_of_small_nums) < len(self.min_heap_of_large_nums):
            heappush(self.max_heap_of_small_nums, -1 * heappop(self.min_heap_of_large_nums))
        elif len(self.max_heap_of_small_nums) > len(self.min_heap_of_large_nums) + 1:
            heappush(self.min_heap_of_large_nums, -1 * heappop(self.max_heap_of_small_nums))

    # This function should return the median of the stored numbers
    def find_median(self):
        if len(self.max_heap_of_small_nums) == len(self.min_heap_of_large_nums):
            return -self.max_heap_of_small_nums[0] / 2.0 + self.min_heap_of_large_nums[0] / 2.0
        return -self.max_heap_of_small_nums[0]