/*
We are given an array of closed intervals, intervals, where each interval has a start time and an end time. The input array is sorted with respect to the start times of each interval. For example, intervals = 
[[1,4], [3,6], [7,9]] is sorted in terms of start times 1, 3, 7.

Your task is to merge the overlapping intervals and return a new output array consisting of only the non-overlapping intervals.
*/

class Interval:
    def __init__(self, start, end):
        self.start = start
        self.end = end
        self.closed = True  # by default, the interval is closed
    # set the flag for closed/open

    def set_closed(self, closed):
        self.closed = closed

    def __str__(self):
        return "[" + str(self.start) + ", " + str(self.end) + "]" \
            if self.closed else \
                "(" + str(self.start) + ", " + str(self.end) + ")"

def merge_intervals(intervals):
    if len(intervals) == 0:
        return []
    result = []
    for interval in intervals:
        if len(result) == 0:
            result.append(interval)
            continue
        prev_interval = result[-1]
        ## Completely inside previous interval
        if (prev_interval.start <= interval.start) and (prev_interval.end >= interval.end):
            result[-1] = prev_interval
        ## Partly inside previous interval
        elif (prev_interval.start <= interval.start) and (prev_interval.end < interval.end) and (prev_interval.end >= interval.start):
            prev_interval.end = interval.end
            result[-1] = prev_interval
        ## Disjoint
        elif (prev_interval.end <= interval.start):
            result.append(interval)
    return result