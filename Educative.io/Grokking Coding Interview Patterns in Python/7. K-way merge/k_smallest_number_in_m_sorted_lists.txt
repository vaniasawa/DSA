/*
Given an m number of sorted lists in ascending order and an integer, k, find the k th smallest number among all the given lists.

Although there can be repeating values in the lists, each element is considered unique and, therefore, contributes to calculating the 
k th smallest element.

If k is greater than the total number of elements in the input lists, return the greatest element from all the lists, and if there are no elements in the input lists, return 0.
*/

from heapq import *

def k_smallest_number(lists, k):
    sorted_heap = []
    for i, row in enumerate(lists):
        heapq.heapify(row)
        lists[i] = row
        sorted_heap

    sorted_heap = [(row[0], i) for i, row in enumerate(lists)]
    heapq.heapify(sorted_heap)

    for _ in range(k):
        discarded_element = heapq.heappop(sorted_heap)
        new_element = lists[discarded_element[1]]